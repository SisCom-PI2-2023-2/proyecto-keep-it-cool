{
  "fqn": "mapa_de_calor2",
  "name": "Mapa de Calor",
  "deprecated": false,
  "image": null,
  "description": null,
  "descriptor": {
    "type": "timeseries",
    "sizeX": 8,
    "sizeY": 5,
    "resources": [],
    "templateHtml": "<div style=\"position: relative;\">\n    <canvas id=\"canvas1\" width=\"640\" height=\"366\" style=\"position: absolute; left: 0; top: 0; z-index: 0;\"></canvas>\n    <canvas id=\"canvas2\" width=\"640\" height=\"366\" style=\"position: absolute; left: 0; top: 0; z-index: 1;\"></canvas>\n</div>",
    "templateCss": "",
    "controllerScript": "var c1;\nvar c2;\nvar ctx1;\nvar ctx2;\nvar heat;\nvar img;\nvar data = Array(10000).fill();\n\nself.onInit = function() {\n    \n    self.ctx.hideTitlePanel = true;\n    self.ctx.$scope.datasources = self.ctx.defaultSubscription.datasources; // Definir datasources igual al de la defaultSubscription\n    self.ctx.$scope.data = self.ctx.defaultSubscription.data; // Definir data igual al de la defaultSubscription\n    \n    self.ctx.$scope.datasourceData = [];\n    \n    var currentDatasource = null;\n    var currentDatasourceIndex = -1;\n    \n    for (var i=0;i<self.ctx.$scope.data.length;i++) {\n        var dataKeyData = self.ctx.$scope.data[i];\n        if (dataKeyData.datasource != currentDatasource) {\n            currentDatasource = dataKeyData.datasource\n            currentDatasourceIndex++;\n            self.ctx.$scope.datasourceData[currentDatasourceIndex] = [];\n            \n        } \n        self.ctx.$scope.datasourceData[currentDatasourceIndex].push(dataKeyData);\n    }\n    self.ctx.updateWidgetParams();\n    \n    c1 = document.getElementById(\"canvas1\");\n    c2 = document.getElementById(\"canvas2\");\n    ctx1 = c1.getContext(\"2d\");\n    ctx2 = c2.getContext(\"2d\");\n\n    heat = simpleheat(c1);\n    \n    // set point radius and blur radius\n    heat.radius(3, 10);\n    \n    // set max data value\n    heat.max(25);\n\n    // img = new Image();\n    // img.src = \"\";\n    \n    // const button = document.querySelector(\"input\");\n    // button.addEventListener(\"click\", cliqueado);\n    // function cliqueado(){\n    //     prompt(\"asdasd\");\n    // }\n    \n    \n    // img.onload = function(){\n    //     //dibujar la imagen, formato (img, margen1,margen2,ancho,alto)\n    //     dibujar();\n    //     ctx2.drawImage(img, 0, 0,640 ,366);\n    // }\n}\n\nself.onDataUpdated = function(){\n    \n    interpolar(self.ctx.data);\n    heat.data(data);\n    heat.draw();\n    \n}\n\nself.onResize = function() {\n    c1.height = self.ctx.height;\n    c1.width = self.ctx.width;\n    heat.resize();\n}\n\nfunction interpolar(valores) {\n    \n    let t1, t2, t3, t4;\n    for (let i = 0; i < valores.length; i++) {\n        \n        if (valores[i].data.length > 1) {\n        \n            switch (i) {\n                case 0:\n                    t1 = valores[i].data[valores[i].data.length - 1][1];\n                    break;\n                case 1:\n                    t2 = valores[i].data[valores[i].data.length - 1][1];\n                    break;\n                    \n                case 2:\n                    t3 = valores[i].data[valores[i].data.length - 1][1];\n                    break;\n                    \n                case 3:\n                    t4 = valores[i].data[valores[i].data.length - 1][1];\n                    break;\n            }\n        }\n    }\n    \n    let map = Array(100).fill().map(()=>Array(100).fill());\n    let cAncho = c1.width/100;   //Coeficientes para la escala\n    let cAlto = c1.height/100;    // Alto(O ANCHO) / 100\n    \n    deltaT1 = (t3-t1)/80;\n    deltaT2 = (t4-t2)/80;\n    let cant = 0;\n    \n    for(let i = 0; i<100; i++){\n        map[i][9] = deltaT1*(i-9) + t1;\n        map[i][89] = deltaT2*(i-9) + t2;\n    }\n    \n    for(let i = 0; i<100; i++){\n        \n        deltaT = (map[i][89]-map[i][9])/80;\n        \n        for(let j = 0; j<100; j++){\n            \n            map[i][j] = deltaT*(j-9) + map[i][9];\n            \n            data[cant] = [j*cAncho,i*cAlto,map[i][j]];\n            cant++;\n        }\n    }\n}\n\n// Codigo de: https://github.com/mourner/simpleheat/tree/gh-pages\nfunction simpleheat(canvas) {\n    if (!(this instanceof simpleheat)) return new simpleheat(canvas);\n\n    this._canvas = canvas = typeof canvas === 'string' ? document.getElementById(canvas) : canvas;\n\n    this._ctx = canvas.getContext('2d');\n    this._width = canvas.width;\n    this._height = canvas.height;\n\n    this._max = 1;\n    this._data = [];\n}\n\nsimpleheat.prototype = {\n\n    defaultRadius: 25,\n\n    defaultGradient: {\n        0.4: 'blue',\n        0.6: 'cyan',\n        0.7: 'lime',\n        0.8: 'yellow',\n        1.0: 'red'\n    },\n\n    data: function (data) {\n        this._data = data;\n        return this;\n    },\n\n    max: function (max) {\n        this._max = max;\n        return this;\n    },\n\n    add: function (point) {\n        this._data.push(point);\n        return this;\n    },\n\n    clear: function () {\n        this._data = [];\n        return this;\n    },\n\n    radius: function (r, blur) {\n        blur = blur === undefined ? 15 : blur;\n\n        // create a grayscale blurred circle image that we'll use for drawing points\n        var circle = this._circle = this._createCanvas(),\n            ctx = circle.getContext('2d'),\n            r2 = this._r = r + blur;\n\n        circle.width = circle.height = r2 * 2;\n\n        ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n        ctx.shadowBlur = blur;\n        ctx.shadowColor = 'black';\n\n        ctx.beginPath();\n        ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n        ctx.closePath();\n        ctx.fill();\n\n        return this;\n    },\n\n    resize: function () {\n        this._width = this._canvas.width;\n        this._height = this._canvas.height;\n    },\n\n    gradient: function (grad) {\n        // create a 256x1 gradient that we'll use to turn a grayscale heatmap into a colored one\n        var canvas = this._createCanvas(),\n            ctx = canvas.getContext('2d'),\n            gradient = ctx.createLinearGradient(0, 0, 0, 256);\n\n        canvas.width = 1;\n        canvas.height = 256;\n\n        for (var i in grad) {\n            gradient.addColorStop(+i, grad[i]);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, 1, 256);\n\n        this._grad = ctx.getImageData(0, 0, 1, 256).data;\n\n        return this;\n    },\n\n    draw: function (minOpacity) {\n        if (!this._circle) this.radius(this.defaultRadius);\n        if (!this._grad) this.gradient(this.defaultGradient);\n\n        var ctx = this._ctx;\n\n        ctx.clearRect(0, 0, this._width, this._height);\n\n        // draw a grayscale heatmap by putting a blurred circle at each data point\n        for (var i = 0, len = this._data.length, p; i < len; i++) {\n            p = this._data[i];\n            ctx.globalAlpha = Math.min(Math.max(p[2] / this._max, minOpacity === undefined ? 0.05 : minOpacity), 1);\n            ctx.drawImage(this._circle, p[0] - this._r, p[1] - this._r);\n        }\n\n        // colorize the heatmap, using opacity value of each pixel to get the right color from our gradient\n        var colored = ctx.getImageData(0, 0, this._width, this._height);\n        this._colorize(colored.data, this._grad);\n        ctx.putImageData(colored, 0, 0);\n\n        return this;\n    },\n\n    _colorize: function (pixels, gradient) {\n        for (var i = 0, len = pixels.length, j; i < len; i += 4) {\n            j = pixels[i + 3] * 4; // get gradient color from opacity value\n\n            if (j) {\n                pixels[i] = gradient[j];\n                pixels[i + 1] = gradient[j + 1];\n                pixels[i + 2] = gradient[j + 2];\n            }\n        }\n    },\n\n    _createCanvas: function () {\n        if (typeof document !== 'undefined') {\n            return document.createElement('canvas');\n        } else {\n            // create a new canvas instance in node.js\n            // the canvas class needs to have a default constructor without any parameter\n            return new this._canvas.constructor();\n        }\n    }\n};\n\n\n",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}",
    "latestDataKeySettingsSchema": "{}",
    "settingsDirective": "tb-flot-line-widget-settings",
    "dataKeySettingsDirective": "tb-flot-line-key-settings",
    "latestDataKeySettingsDirective": "tb-flot-latest-key-settings",
    "hasBasicMode": true,
    "basicModeDirective": "tb-flot-basic-config",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"stack\":false,\"fontSize\":10,\"fontColor\":\"#545454\",\"showTooltip\":true,\"tooltipIndividual\":false,\"tooltipCumulative\":false,\"hideZeros\":false,\"grid\":{\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1,\"color\":\"#545454\",\"backgroundColor\":null,\"tickColor\":\"#DDDDDD\"},\"xaxis\":{\"title\":null,\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"min\":null,\"max\":null,\"title\":null,\"showLabels\":true,\"color\":\"#545454\",\"tickSize\":null,\"tickDecimals\":0,\"ticksFormatter\":\"\"},\"shadowSize\":4,\"smoothLines\":false,\"comparisonEnabled\":false,\"xaxisSecond\":{\"axisPosition\":\"top\",\"title\":null,\"showLabels\":true},\"showLegend\":true,\"legendConfig\":{\"direction\":\"column\",\"position\":\"bottom\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false},\"customLegendEnabled\":false},\"title\":\"Timeseries Line Chart\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"configMode\":\"basic\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\"}"
  },
  "externalId": null,
  "tags": null
}
