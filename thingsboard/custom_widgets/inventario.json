{
  "fqn": "inventario",
  "name": "Inventario",
  "deprecated": false,
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 7.5,
    "sizeY": 3,
    "resources": [],
    "templateHtml": "<div id=\"titulo\">\n    Inventario\n</div>\n\n<div style=\"position: relative;\">\n    <div>  \n        <table>\n            <thead>\n                <tr>               \n                    <th id=\"thProductos\"> Productos </th>\n                    <th id=\"thCantidad\"> Cantidad </th>\n                </tr>\n            </thead>\n            <tbody id=tabla>\n            </tbody>\n        </table>\n    </div>\n</div>",
    "templateCss": "#container {\n    overflow: auto;\n}\n\n#titulo {\n    padding: 15px;\n}\n\ntable, th, tr, td {\n    border-bottom: 1px solid LightGray;\n    text-align: center;\n    padding: 12px;\n}\n\ntable {\n width:100%;\n border-collapse: collapse;\n}\n\nth {\n    color: gray;\n    font-size: 0.9rem;\n}\n\nth:hover {\n    color: lightgray;\n    cursor: pointer;\n}\n\n.item:hover {\n    background-color: rgb(230, 230, 230);\n}\n\n",
    "controllerScript": "const Ordenes = {\n    Producto: 0,\n    ProductoAlt: 1,\n    Cantidad: 2,\n    CantidadAlt: 3\n};\n\nvar sorting = 0;             // Sorting utilizado actualmente\nvar sortingProdAnterior = 0; // Ultimo sorting utilizado en la columna de productos\nvar sortingCantAnterior = 2; // Ultimo sorting utilizado en la columna de cantidades\n\nself.onInit = function() {\n    \n    self.ctx.hideTitlePanel = true; \n    self.ctx.$scope.datasources = self.ctx.defaultSubscription.datasources; // Definir datasources igual al de la defaultSubscription\n    self.ctx.$scope.data = self.ctx.defaultSubscription.data; // Definir data igual al de la defaultSubscription\n    \n    self.ctx.$scope.datasourceData = [];\n    \n    var currentDatasource = null;\n    var currentDatasourceIndex = -1;\n    \n    for (var i=0;i<self.ctx.$scope.data.length;i++) {\n        var dataKeyData = self.ctx.$scope.data[i];\n        if (dataKeyData.datasource != currentDatasource) {\n            currentDatasource = dataKeyData.datasource\n            currentDatasourceIndex++;\n            self.ctx.$scope.datasourceData[currentDatasourceIndex] = [];\n            \n        } \n        self.ctx.$scope.datasourceData[currentDatasourceIndex].push(dataKeyData);\n    }\n    self.ctx.updateWidgetParams();\n  \n    self.onResize();\n\n    // Eventos para cambiar ordenado\n    document.getElementById(\"thProductos\").addEventListener(\"click\", evntOrdenarProducto); \n    document.getElementById(\"thCantidad\").addEventListener(\"click\", evntOrdenarCantidad);\n}\n\nself.onDataUpdated = function() {\n    actualizarTabla(self.ctx.data);\n}\n\nself.onResize = function() {\n    \n}\n\nself.onDestroy = function() {\n}\n\nfunction actualizarTabla(data) {\n\n    // Obtengo el JSON con los productos\n    let inventario = data[0][\"data\"];\n    \n    // Obtengo cuerpo de tabla donde poner cada producto\n    let tabla = document.getElementById(\"tabla\");\n        \n    // Limpio el cuerpo de la tabla\n    tabla.innerHTML = '';\n    \n    // Si no hay datos indico que no hay y salgo\n    if (inventario.length <= 0 || inventario[0].length <= 1) {\n        \n        let row = document.createElement(\"tr\");\n        row.innerHTML = \"No hay productos\";\n        tabla.appendChild(row);\n        \n    } else {\n        \n        inventario = JSON.parse(inventario[0][1]);\n        \n        // Ordenar alfabeticamente\n        \n        switch (sorting) {\n            \n            case Ordenes.Producto:\n                inventario = sortProducto(inventario, true);\n                break;\n                \n            case Ordenes.ProductoAlt:\n                inventario = sortProducto(inventario, false);\n                break;\n            \n            case Ordenes.Cantidad:\n                inventario = sortCantidad(inventario, true);\n                break;\n            \n            case Ordenes.CantidadAlt:\n                inventario = sortCantidad(inventario, false);\n                break;\n        }\n        \n        for (let key in inventario)\n        {\n            let producto = inventario[key];\n            let nombre = producto[1][\"Producto\"];\n            let cant = producto[1][\"Cantidad\"];\n            \n            if (cant > 0)\n            {\n                let row = document.createElement(\"tr\");\n                \n                let nombreCell = document.createElement(\"td\");\n                nombreCell.innerHTML = nombre;\n                \n                let cantCell = document.createElement(\"td\");\n                cantCell.innerHTML = cant;\n                \n                row.appendChild(nombreCell);\n                row.appendChild(cantCell);\n                row.className = \"item\" // para CSS\n                \n                tabla.appendChild(row);\n            }\n        }\n    }\n}\n\n// Por defecto = true -> Orden alfabetico estandar de A-Z.\nfunction sortProducto(inventario, porDefecto) {\n   \n    let entries = Object.entries(inventario);\n    let ordenado;\n    \n    if (porDefecto)\n    {\n        ordenado = entries.sort((a, b) => ('' + a[1][\"Producto\"]).localeCompare(b[1][\"Producto\"]));\n        \n    } else {\n        ordenado = entries.sort((a, b) => ('' + b[1][\"Producto\"]).localeCompare(a[1][\"Producto\"]));\n    }\n    \n    return ordenado;\n}\n\n// Por defecto = true -> Orden numerico estandar de menor a mayor.\nfunction sortCantidad(inventario, porDefecto) {\n  \n    let entries = Object.entries(inventario);\n    let ordenado;\n    \n    if (porDefecto)\n    {\n        ordenado = entries.sort((a, b) => a[1][\"Cantidad\"] - b[1][\"Cantidad\"]);\n    } else {\n        ordenado = entries.sort((a, b) => b[1][\"Cantidad\"] - a[1][\"Cantidad\"]);\n    }\n    \n    return ordenado;\n}\n\nfunction evntOrdenarProducto() {\n    \n    if (sorting != Ordenes.Producto && sorting != Ordenes.ProductoAlt)\n    {\n        sorting = sortingProdAnterior;\n    } else if (sorting != Ordenes.Producto)\n    {\n        sorting = Ordenes.Producto;\n    } else {\n        sorting = Ordenes.ProductoAlt;\n    }\n    sortingProdAnterior = sorting;\n    \n    actualizarTabla(self.ctx.data);\n}\n\nfunction evntOrdenarCantidad() {\n    \n    if (sorting != Ordenes.Cantidad && sorting != Ordenes.CantidadAlt)\n    {\n        sorting = sortingCantAnterior;\n    } else if (sorting != Ordenes.Cantidad) {\n        sorting = Ordenes.Cantidad;\n    } else {\n        sorting = Ordenes.CantidadAlt;\n    }\n    sortingCantAnterior = sorting;\n    \n    actualizarTabla(self.ctx.data);\n}\n\n\n\n\n\n\n\n\n\n\n",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\"}"
  },
  "externalId": null,
  "tags": null
}